import { PrismaClient } from '@prisma/client'
import { productCategories as categories } from '../src/data/categories'
import { popularBrands as brands } from '../src/data/brands'
import { sampleProducts as products } from '../src/data/products'

const prisma = new PrismaClient()

async function main() {
  console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')

  // –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...')
  await prisma.productTagRelation.deleteMany()
  await prisma.productSpecification.deleteMany()
  await prisma.orderItem.deleteMany()
  await prisma.order.deleteMany()
  await prisma.contactRequest.deleteMany()
  await prisma.product.deleteMany()
  await prisma.productTag.deleteMany()
  await prisma.brand.deleteMany()
  await prisma.category.deleteMany()
  await prisma.user.deleteMany()

  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  console.log('üìÇ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...')
  const categoryMap = new Map<string, string>()
  
  for (const category of categories) {
    const created = await prisma.category.create({
      data: {
        name: category.name,
        slug: category.slug,
        description: category.description,
        sortOrder: category.sortOrder,
        isActive: category.isActive,
      },
    })
    categoryMap.set(category.id, created.id)
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–≤
  console.log('üè∑Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–≤...')
  const brandMap = new Map<string, string>()
  
  for (const brand of brands) {
    const created = await prisma.brand.create({
      data: {
        name: brand.name,
        slug: brand.slug,
        logo: brand.logo,
        description: brand.description,
        website: brand.website,
        isActive: brand.isActive,
      },
    })
    brandMap.set(brand.id, created.id)
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
  console.log('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤...')
  
  for (const product of products) {
    const categoryId = categoryMap.get(product.category.id)
    const brandId = product.brand ? brandMap.get(product.brand.id) : null

    if (!categoryId) {
      console.warn(`‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${product.name}`)
      continue
    }

    const created = await prisma.product.create({
      data: {
        name: product.name,
        slug: product.slug,
        description: product.description,
        shortDescription: product.shortDescription,
        sku: product.sku,
        price: product.price,
        oldPrice: product.oldPrice,
        isNew: product.isNew,
        isFeatured: product.isFeatured,
        isAvailable: product.isAvailable,
        stock: product.stock,
        minOrder: product.minOrder,
        weight: product.weight,
        dimensions: product.dimensions as any,
        images: JSON.stringify(product.images),
        seoTitle: product.seoTitle,
        seoDescription: product.seoDescription,
        seoKeywords: Array.isArray(product.seoKeywords) ? product.seoKeywords.join(', ') : product.seoKeywords,
        viewCount: product.viewCount,
        categoryId,
        brandId,
      },
    })

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–æ–≤–∞—Ä–∞
    if (product.specifications?.length > 0) {
      await prisma.productSpecification.createMany({
        data: product.specifications.map((spec: any) => ({
          name: spec.name,
          value: spec.value,
          group: spec.group,
          sortOrder: spec.sortOrder,
          productId: created.id,
        })),
      })
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–µ–≥–æ–≤
  console.log('üè∑Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–æ–≤...')
  const tags = [
    { name: '–ù–æ–≤–∏–Ω–∫–∞', slug: 'new', color: '#10B981' },
    { name: '–•–∏—Ç –ø—Ä–æ–¥–∞–∂', slug: 'bestseller', color: '#F59E0B' },
    { name: '–ê–∫—Ü–∏—è', slug: 'sale', color: '#EF4444' },
    { name: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º', slug: 'recommended', color: '#8B5CF6' },
  ]

  for (const tag of tags) {
    await prisma.productTag.create({
      data: tag,
    })
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏
  console.log('üìû –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏...')
  await prisma.contactRequest.create({
    data: {
      name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
      email: 'ivan@example.com',
      phone: '+7 (999) 123-45-67',
      company: '–û–û–û "–¢–µ—Å—Ç"',
      message: '–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫–ª–∞–¥–∞',
      equipment: '–¢–µ—Ä–º–∏–Ω–∞–ª —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö',
    },
  })

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  console.log('üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...')
  await prisma.user.create({
    data: {
      email: 'admin@stp-service.ru',
      name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      phone: '+7 (495) 255-08-54',
      password: 'admin123', // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–µ–º–æ
      role: 'ADMIN',
      isActive: true,
    },
  })

  await prisma.user.create({
    data: {
      email: 'manager@stp-service.ru', 
      name: '–ú–µ–Ω–µ–¥–∂–µ—Ä',
      phone: '+7 (495) 255-08-55',
      password: 'manager123', // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–µ–º–æ
      role: 'MANAGER',
      isActive: true,
    },
  })

  console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!')
}

main()
  .then(async () => {
    await prisma.$disconnect()
  })
  .catch(async (e) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', e)
    await prisma.$disconnect()
    process.exit(1)
  })
